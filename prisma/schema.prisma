datasource db {
  provider = "postgresql" // Specifies the PostgreSQL provider
  url      = env("DATABASE_URL") // Fetches the connection string from the .env file
}

generator client {
  provider = "prisma-client-js" // Generates the Prisma client
   binaryTargets = ["native", "linux-musl"]
}

model User {
  id              String     @id // Company ID as the primary key
  status          String     // Active or Inactive
  userId          String     @unique // Unique identifier for tracking employee records
  username        String?    // Unique username for login
  firstName       String     // Employee's first name
  lastName        String     // Employee's last name
  gender          String?    // Gender: M/F
  email           String     @unique // Complete email address
  manager         String?    // Manager's USERID or NO_MANAGER
  hr              String?    // HR representative's USERID or NO_HR
  timezone        String?    // Time zone (e.g., PST, EST)
  mi              String?    // Employee's full name
  department      String?    // Department name
  jobCode         String?    // Job role code
  division        String?    // Division name
  location        String?    // Location where employee works
  hireDate        DateTime?  // Hire date (mm/dd/yyyy format)
  empId           String?    // Employee ID
  title           String?    // Employee's title
  bizPhone        String?    // Business phone number
  fax             String?    // Fax number
  addr1           String?    // Address line 1
  addr2           String?    // Address line 2
  city            String?    // City
  state           String?    // State
  zip             String?    // ZIP code
  country         String?    // Country
  reviewFreq      String?    // Review frequency (e.g., Annual)
  lastReviewDate  DateTime?  // Last review date
  customFields    Json?      // Custom fields (CUSTOM01-CUSTOM15)
  matrixManager   String?    // Dotted line manager's USERID
  defaultLocale   String?    // Locale used by the employee
  proxy           String?    // Proxy's USERID

  @@map("users")
}

model Team {
  id                    String  @id @default(uuid()) // Primary key
  displayName           String                      // Team name
  stripeCustomerId      String?                     // Stripe customer ID
  subscriptionId        String?                     // Subscription ID
  subscriptionProductId String?                     // Subscription product ID
  subscriptionStatus    String?                     // Subscription status

  @@map("teams") // Maps to the "teams" table in the database
}

model Member {
  id                 String           @id @default(uuid()) // Primary key
  teamId             String                                       // Foreign key to Team
  inviteCodeOrUserId String                                       // Invite code or user ID
  email              String                                       // Member email
  role               Role                                         // Role (ENUM)
  status             InvitationStatus                            // Invitation status (ENUM)

  @@unique([teamId, inviteCodeOrUserId], name: "teamInviteCodeOrUserId") // Unique composite key
  @@map("members") // Maps to the "members" table in the database
}

model Todo {
  id      String @id @default(uuid()) // Primary key
  ownerId String                     // Foreign key to User or Team
  title   String                     // Todo title

  @@map("todos") // Maps to the "todos" table in the database
}

// Enums
enum Role {
  OWNER
  ADMIN
  MEMBER
  READ_ONLY
}

enum InvitationStatus {
  PENDING
  ACTIVE
  INACTIVE
}
